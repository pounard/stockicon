<?php

/**
 * @file
 * Stock icon module.
 */

use StockIcon\Impl\LocalIconRenderer;
use StockIcon\Impl\NullIconTheme;
use StockIcon\IconRenderer;
use StockIcon\Impl\ReadonlyIconRenderer;
use StockIcon\Toolkit\ToolkitHelper;

use DrupalStockIcon\DrupalIconRenderer;
use DrupalStockIcon\CachedThemeFactory;

/**
 * Default folder where icons are stored variable name.
 */
const STOCKICON_THEME_PATH_VAR      = 'stockicon_theme_path';

/**
 * Default folder where icons are stored variable name.
 */
const STOCKICON_THEME_PATH_DEFAULT  = 'public://stockicon';

/**
 * Default folder where generated icons are stored variable name.
 */
const STOCKICON_PUBLIC_PATH_VAR     = 'stockicon_public_path';

/**
 * Default folder where generated icons are stored variable name.
 */
const STOCKICON_PUBLIC_PATH_DEFAULT = 'public://styles/icons-custom';

/**
 * Define a custom autoloader if non declared, this prerequisite that the
 * library lives under the same folder hierarchy than the composer package.
 */
if (!class_exists('StockIcon\IconTheme')) {
  // In case no custom autoloader is provided, use the composer one.
  // In order to use it, you need to run "composer install" in the
  // APubSub folder root.
  $autoloadFile = __DIR__ . '/../../../vendor/autoload.php';
  if (file_exists($autoloadFile)) {
    require $autoloadFile;
  }
}

// Provide a custom autoloader for our custom classes.
spl_autoload_register(function ($className) {
  if (false !== strpos($className, '\\')) {
    $parts = explode('\\', $className);
    if ('DrupalStockIcon' === $parts[0]) {
      $filename = __DIR__ . '/lib/' . implode('/', $parts) . '.php';
      if (file_exists($filename)) {
        return (bool)require_once $filename;
      }
    }
  }
  return false;
});

/**
 * Implements hook_menu().
 */
function stockicon_menu() {
  $items = array();

  // We need to discover if the current path where to put generated images is
  // local or not. Ideally, someone could configure a remote CDN instead of
  // generating images locally, case in which we'd leave the default renderer
  // and would not add this callback.
  $renderer = stockicon_renderer_get();
  if ($renderer instanceof DrupalIconRenderer && ($path = $renderer->getMenuRouterPath())) {
    $i = count(explode('/', $path)); 
    $items[$path] = array(
      'page callback'   => 'stockicon_renderer_deliver',
      'page arguments'  => array(
            $i, // Theme name
          ++$i, // Size
          ++$i, // Image name and extension
      ),
      'access callback' => TRUE,
      'type'            => MENU_CALLBACK,
    );
  }

  // Consumer list.
  $items['admin/appearance/stockicon'] = array(
    'title'            => "Stock icons",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('stockicon_admin_appearance'),
    'access arguments' => array('administer site configuration'),
    'file'             => 'stockicon.admin.inc',
    'type'             => MENU_LOCAL_TASK,
  );
  // Theme list.
  $items['admin/appearance/stockicon-theme'] = array(
    'title'            => "Stock icons themes",
    'page callback'    => 'stockicon_admin_appearance_theme',
    'access arguments' => array('administer site configuration'),
    'file'             => 'stockicon.admin.inc',
    'type'             => MENU_LOCAL_TASK,
  );
  $items['admin/appearance/stockicon-theme/%stockicon_theme'] = array(
    'title'            => "Themes",
    'page callback'    => 'stockicon_admin_appearance_theme_preview',
    'page arguments'   => array(3),
    'access arguments' => array('administer site configuration'),
    'file'             => 'stockicon.admin.inc',
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['admin/appearance/stockicon-theme/%stockicon_theme/grid'] = array(
    'title'            => "Grid",
    'type'             => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/appearance/stockicon-theme/%stockicon_theme/table'] = array(
    'title'            => "Table",
    'page callback'    => 'stockicon_admin_appearance_theme_preview_table',
    'page arguments'   => array(3),
    'access arguments' => array('administer site configuration'),
    'file'             => 'stockicon.admin.inc',
    'type'             => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Get local writable public stream schemes available.
 *
 * @return array
 *   List of stream schemes, can be empty.
 */
function _stockicon_stream_get_local_schemes() {
  // Determine local and public stream wrappers from what we can.
  $public_schemes = array();
  foreach (file_get_stream_wrappers() as $scheme => $info) {
    if ($info['type'] & STREAM_WRAPPERS_VISIBLE) {
      $public_schemes[] = $scheme;
    }
  }
  return $public_schemes;
}

/**
 * Get renderer
 *
 * @return \StockIcon\IconRenderer
 */
function stockicon_renderer_get() {

  $renderer = &drupal_static(__FUNCTION__);

  if (null !== $renderer) {
    return $renderer;
  }

  $public_path = variable_get(STOCKICON_PUBLIC_PATH_VAR, STOCKICON_PUBLIC_PATH_DEFAULT);
  $schemes     = _stockicon_stream_get_local_schemes();
  $toolkit     = null;

  // Ensure the scheme is local, if it is, it must be public else we cannot
  // render any images, we would switch to a default readonly instance. If
  // the URI is not public, we may keep the default implementation hopping
  // that the toolkit will correctly use the remote stream.
  if (strpos($public_path, '://')) {
    list($scheme, $uri) = explode('://', $public_path);

    if (in_array($scheme, $schemes)) {
      $renderer = new DrupalIconRenderer(DRUPAL_ROOT, $public_path, $schemes);
    } else {
      // Default icon renderer toolkit should be able to render remote schemes
      // without needing us to store anything, let's give a shot at it: this
      // allows site admins to use CDN for which they integrated a PHP stream
      // wrapper natively and transparently
      $renderer = new LocalIconRenderer(DRUPAL_ROOT, $public_path, $toolkit, $schemes);
    }
  } else {
    if (file_prepare_directory($public_path, FILE_CREATE_DIRECTORY)) {
      $renderer = new DrupalIconRenderer(DRUPAL_ROOT, $public_path, $schemes);
    } else {
      $renderer = new ReadonlyIconRenderer(DRUPAL_ROOT, $schemes);
    }
  }

  return $renderer;
}

/**
 * Get default factory for themes.
 *
 * @return \StockIcon\ThemeFactory
 *   Theme factory.
 */
function stockicon_theme_factory_get() {

  $instance = &drupal_static(__FUNCTION__);

  if (null === $instance) {

    $theme_path = variable_get(STOCKICON_THEME_PATH_VAR, STOCKICON_THEME_PATH_DEFAULT);

    if (!file_prepare_directory($theme_path, FILE_CREATE_DIRECTORY)) {
      // @todo Do something!!!
    }

    $renderer = stockicon_renderer_get();

    $instance = new CachedThemeFactory('\StockIcon\Impl\DesktopThemeFactory', array(array($theme_path)));
    $instance->setIconRenderer($renderer);
  }

  return $instance;
}

/**
 * Get theme consumers list.
 *
 * @return array
 *   Array of string names.
 */
function stockicon_consumer_list() {

  $list = &drupal_static(__FUNCTION__);

  if (null === $list) {
    $list = module_invoke_all('stockicon_consumer');

    if (!in_array('default', $list)) {
      $list[] = 'default';
    }
  }

  return $list;
}

/**
 * Menu helper.
 */
function stockicon_theme_load($theme_name) {

  if (null === $theme_name) {
    return false;
  }

  $factory = stockicon_theme_factory_get();

  if ($factory->hasTheme($theme_name)) {
    return $factory->getTheme($theme_name);
  } else {
    return false;
  }
}

/**
 * Get icon theme
 *
 * @param string $theme_name
 *   Theme name.
 *
 * @return \StockIcon\IconTheme
 */
function stockicon_theme_get($theme_name) {

  if (null === $theme_name) {
    return new NullIconTheme();
  }

  $factory = stockicon_theme_factory_get();

  if ($factory->hasTheme($theme_name)) {
    return $factory->getTheme($theme_name);
  } else {
    return new NullIconTheme();
  }
}

/**
 * Render a stock icon
 *
 * @param string $icon_name
 *   Icon name.
 * @param string $size
 *   Icon size (eg. "32x32").
 * @param string $consumer
 *   Consumer.
 *
 * @return string
 *   Icon URI or null if not found.
 */
function stockicon_uri($icon_name, $size, $consumer = 'default') {
  
}

/**
 * Get icon theme for given consumer
 *
 * @param string $consumer
 *   Consumer name (business API identifier, e.g. "user-notifications").
 *
 * @return \StockIcon\IconTheme
 *   Icon theme.
 */
function stockicon_get($consumer = 'default') {

  $conf = variable_get('stockicon_consumer', array());

  if (isset($conf[$consumer])) {
    $theme_name = $conf[$consumer];
  } else if (!$theme_name = variable_get('stockicon_default_theme')) {
    $theme_name = null;
  }

  return stockicon_theme_get($theme_name);
}

/**
 * Deliver renderered image icon.
 */
function stockicon_renderer_deliver($theme_name, $size, $image_name) {

  if (!strpos($image_name, '.')) {
    return MENU_NOT_FOUND;
  }

  $destFile = request_path();
  $destDir  = dirname($destFile);

  if (!file_prepare_directory($destDir, FILE_CREATE_DIRECTORY)) {
    // @todo Should be a 50X erro
    return MENU_NOT_FOUND;
  }

  list($icon_name, $extension) = explode('.', $image_name);

  $theme = stockicon_theme_get($theme_name);

  try {
    $icon_info = $theme->getIconInfo($icon_name, $size);
    $toolkit   = ToolkitHelper::getToolkit();

    $toolkit->svgToPng($icon_info->getURI(), $size, $destFile);

    // OK, everyting seemed to happen good, now stream the image.
    header('Content-Type: image/png');
    header('Content-Transfer-Encoding: binary');
    header('Expires: 0');
    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
    header('Pragma: public');
    header('Content-Length: ' . filesize($destFile));

    $previous = null;
    while (($level = ob_get_level()) > 0 && $level !== $previous) {
      $previous = $level;
      ob_end_flush();
    }
    flush();

    // Trust PHP internals: not Drupal ones.
    readfile($destFile);

    drupal_page_footer();

  } catch (Exception $e) {
    // Don't care about what happened, can't allow potential DDoS to happen.
    return MENU_NOT_FOUND;
  }
}
